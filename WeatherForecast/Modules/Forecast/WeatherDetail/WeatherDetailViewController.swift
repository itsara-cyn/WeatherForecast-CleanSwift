//
//  WeatherDetailViewController.swift
//  WeatherForecast
//
//  Created by Itsaraporn Chaichayanon on 6/8/18.
//  Copyright (c) 2018 ItsaraChai. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WeatherDetailDisplayLogic: class
{
    func displayWeather(viewModel: WeatherDetail.ViewModel.DisplayWeather)
}

class WeatherDetailViewController: UIViewController, WeatherDetailDisplayLogic
{
    
    @IBOutlet weak var oLabelLocationName: UILabel!
    @IBOutlet weak var oLabelTemperature: UILabel!
    @IBOutlet weak var oLabelHumidity: UILabel!
    @IBOutlet weak var oButtonSeeMore: UIButton!
    @IBOutlet weak var oSegmentUnit: UISegmentedControl!

    var interactor: WeatherDetailBusinessLogic?
    var router: (NSObjectProtocol & WeatherDetailRoutingLogic & WeatherDetailDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = WeatherDetailInteractor()
        let presenter = WeatherDetailPresenter()
        let router = WeatherDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getWeather()
    }
    
    @IBAction func pressButton(_ sender: Any) {
        if let button = sender as? UIButton {
            switch button {
            case oButtonSeeMore: break
//                let request = LocationSearch.Request.FetchCurrentWeather()
//                interactor?.fetchCurrentWeather(request: request)
            default: break
            }
        }
    }
    
    // MARK: Do something
    
    func getWeather()
    {
        let request = WeatherDetail.Request.GetWeather()
        interactor?.getWeather(request: request)
    }
    
    func displayWeather(viewModel: WeatherDetail.ViewModel.DisplayWeather)
    {
        oLabelLocationName.text = viewModel.location
        oLabelTemperature.text = "\(viewModel.temperature)"
        oLabelHumidity.text = "\(viewModel.humidity)"
    }
}
