//
//  LocationSearchViewControllerTests.swift
//  WeatherForecast
//
//  Created by Itsaraporn Chaichayanon on 6/8/18.
//  Copyright (c) 2018 ItsaraChai. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import WeatherForecast
import XCTest

class LocationSearchViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: LocationSearchViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupLocationSearchViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupLocationSearchViewController()
  {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "Main", bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: "LocationSearchViewController") as! LocationSearchViewController
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class LocationSearchBusinessLogicSpy: LocationSearchBusinessLogic
  {
    var fetchCurrentWeatherCalled = false

    func fetchCurrentWeather(request: LocationSearch.Request.FetchCurrentWeather) {
        fetchCurrentWeatherCalled = true
    }
  }
  
  // MARK: Tests
  
  func testShouldDoSomethingWhenViewIsLoaded()
  {
    // Given
    let spy = LocationSearchBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.fetchCurrentWeatherCalled, "viewDidLoad() should ask the interactor to do something")
  }
  
  func testDisplaySomething()
  {
    // Given
    let location = "Fukuoka"
    let temperature: Float = 0
    let humidity = 1
    let viewModel = LocationSearch.ViewModel.Weather(location: location, temperature: temperature, humidity: humidity)
    
    // When
    loadView()
    sut.displayWeatherDetail(viewModel: viewModel)
    
    // Then
    XCTAssertEqual(sut.oLabelTitle.text, location, "displayWeatherDetail(viewModel:) should update the name text field")
  }
}
